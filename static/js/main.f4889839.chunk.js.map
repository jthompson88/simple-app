{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","id","react_default","a","createElement","className","alt","src","CardList","_ref","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","concat","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f4889839.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n  const { name, email, id } = props;\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robots' src={'https://robohash.org/${id}?200x200'}/>\n      <div>\n      <h2>{name}</h2>\n      <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  // //Test ErrorBoundry if true\n  // if (true) {\n  //   throw new Error('NOOOOOO!');\n  // }\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n            />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange}) => {\n  return (\n    //Always a good idea to wrap everything in a div in case you want to add things to your components\n    <div className='pa2'>\n      <input\n        className= 'pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n  </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return  (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props){\n    super(props);\n      this.state = {\n        hasError: false\n      }\n  }\n  //Test Error Boundary\n  componentDidCatch(error, info){\n    this.setState({ hasError: true })\n}\n\nrender() {\n  // Test ErrorBoundry\n  // if (this.state.hasError) {\n  //   return <h1>Ooops. That is not good</h1>\n  // }\n  return this.props.children\n}\n}\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state  => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  //Remember this always has a render function that returns something\n //*Also, render is a built-in function from React\n  render () {\n    const { searchField, onSearchChange, robots,isPending } = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      //statement below is essentially saying that if the name of the robot\n      //(or anything the string), in lowercase, includes 'toLowerCase' then\n      //only return the robot that is true to this condition\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ?\n    <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n        <ErrorBoundry>\n            <CardList  robots={ filteredRobots }/>\n        </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n    }\n  }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: 'CHANGE_SEARCH_FIELD',\n    payload: text\n  })\n\n//create a higher order function-> a function that returns a function\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({},state, {searchField: action.payload})\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false })\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n      default:\n        return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware,combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}